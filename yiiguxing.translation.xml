<application>
  <component name="AppStorage">
    <option name="newTranslationDialogCollapseDictViewer" value="false" />
    <option name="newTranslationDialogHeight" value="232" />
    <option name="newTranslationDialogWidth" value="518" />
    <option name="newTranslationDialogX" value="826" />
    <option name="newTranslationDialogY" value="470" />
    <histories>
      <item value="timeout Millis" />
      <item value="grace Period Millis" />
      <item value="stop Server On Cancellation" />
      <item value="The integer literal does not conform to the expected type ApplicationEngineEnvironment" />
      <item value="start Foreground" />
      <item value="SDK INT" />
      <item value="Passphrase must meet length requirements" />
      <item value="Identity Changed Listener" />
      <item value="Dns Sd Service Response Listener" />
      <item value="_presence" />
      <item value="Dns Sd Txt Record Listener" />
      <item value="set Dns Sd Response Listeners" />
      <item value="exported" />
      <item value="poisson" />
      <item value="sample" />
      <item value="lifter" />
      <item value="Plain" />
      <item value="Constraints" />
      <item value="SPEAKER PHONE" />
      <item value="set Web Rtc Based Acoustic Echo Canceler" />
      <item value="set Web Rtc Based Automatic Gain Control" />
      <item value="use Web Rtc Based Noise Suppressor" />
      <item value="set Web Rtc Based Noise Suppressor" />
      <item value="slient" />
      <item value="enum" />
      <item value="Web Rtc Audio Record" />
      <item value="ENABLE INTERNAL TRACER" />
      <item value="disable Encryption" />
      <item value="set Loopback" />
      <item value="use SDES" />
      <item value="loopback" />
      <item value="disable Network Monitor" />
      <item value="use Open SLES" />
      <item value="disable Built In AEC" />
      <item value="set Blacklist Device For Open SLES Usage" />
      <item value="loudspeaker" />
      <item value="Terminal flow operator that collects the given flow but ignores all emitted values. If any exception occurs during collect or in the provided flow, this exception is rethrown from this method. It is a shorthand for `collect {}`. This operator is usually used with [onEach], [onCompletion] and [catch] operators to process all emitted values and handle an exception that might occur in the upstream flow or during processing, for example:" />
      <item value="Terminal flow operator that [launches][launch] the [collection][collect] of the given flow in the [scope]. It is a shorthand for `scope.launch { flow.collect() }`. This operator is usually used with [onEach], [onCompletion] and [catch] operators to process all emitted values handle an exception that might occur in the upstream flow or during processing, for example:" />
      <item value="Terminal flow operator that [launches][launch] the [collection][collect] of the given flow in the [scope]. It is a shorthand for `scope.launch { flow.collect() }`. This operator is usually used with [onEach], [onCompletion] and [catch] operators to process all emitted values handle an exception that might occur in the upstream flow or during processing, for example: ``` flow .onEach { value -&gt; updateUi(value) } .onCompletion { cause -&gt; updateUi(if (cause == null) &quot;Done&quot; else &quot;Failed&quot;) } .catch { cause -&gt; LOG.error(&quot;Exception: cause&quot;) } .launchIn(uiScope) ``` Note that the resulting value of [launchIn] is not used and the provided scope takes care of cancellation." />
      <item value="```" />
      <item value="Disposable Effect" />
      <item value="operator" />
      <item value="drop While" />
      <item value="Freeze the preferences since any future mutations will break DataStore. If a user tunnels the value out of DataStore and mutates it, this could be problematic. This is a safe cast, since MutablePreferences is the only implementation of Preferences." />
      <item value="Preference" />
      <item value="Preferences" />
      <item value="Eagerly" />
      <item value="Class to store ViewModels. An instance of ViewModelStore must be retained through configuration changes: if an owner of this ViewModelStore is destroyed and recreated due to configuration changes, new instance of an owner should still have the same old instance of ViewModelStore. If an owner of this ViewModelStore is destroyed and is not going to be recreated, then it should call clear() on this ViewModelStore, so ViewModels would be notified that they are no longer used. Use ViewModelStoreOwner.getViewModelStore() to retrieve a ViewModelStore for activities and fragments." />
      <item value="Scope" />
      <item value="[DaggerMissingBinding] androidx.fragment.app.FragmentActivity cannot be provided without an @Inject constructor or an @Provides-annotated method." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1171" />
        <entry key="ENGLISH" value="1172" />
        <entry key="POLISH" value="2" />
        <entry key="GERMAN" value="2" />
        <entry key="RUSSIAN" value="1" />
        <entry key="FRENCH" value="12" />
        <entry key="DUTCH" value="1" />
        <entry key="CATALAN" value="3" />
        <entry key="KANNADA" value="1" />
        <entry key="LATIN" value="2" />
        <entry key="ROMANIAN" value="2" />
        <entry key="JAPANESE" value="4" />
        <entry key="SWEDISH" value="2" />
        <entry key="WELSH" value="2" />
        <entry key="SPANISH" value="1" />
        <entry key="GREEK" value="3" />
        <entry key="HUNGARIAN" value="1" />
        <entry key="ITALIAN" value="2" />
        <entry key="HINDI" value="3" />
        <entry key="INDONESIAN" value="2" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1653351991123" />
  </component>
</application>