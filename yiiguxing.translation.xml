<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="594" />
    <option name="newTranslationDialogX" value="826" />
    <option name="newTranslationDialogY" value="470" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="new Single Thread Executor" />
      <item value="Backpressure" />
      <item value="STRATEGY KEEP ONLY LATEST" />
      <item value="LENS FACING BACK" />
      <item value="计算&#10;" />
      <item value="This method is invoked on the worker thread with a request to process. Only one Intent is processed at a time, but the processing happens on a worker thread that runs independently from other application logic. So, if this code takes a long time, it will hold up other requests to the same IntentService, but it will not hold up anything else. When all requests have been handled, the IntentService stops itself, so you should not call {@link stopSelf}. @param intent The value passed to {@link android.content.ContextstartService(Intent)}. This may be null if the service is being restarted after its process has gone away; see {@link android.app.ServiceonStartCommand} for details." />
      <item value="Creates an IntentService. Invoked by your subclass's constructor. @param name Used to name the worker thread, important only for debugging." />
      <item value="Constant to return from {@link onStartCommand}: if this service's process is killed while it is started (after returning from {@link onStartCommand}), then leave it in the started state but don't retain this delivered intent. Later the system will try to re-create the service. Because it is in the started state, it will guarantee to call {@link onStartCommand} after creating the new service instance; if there are not any pending start commands to be delivered to the service, it will be called with a null intent object, so you must take care to check for this. &lt;p&gt;This mode makes sense for things that will be explicitly started and stopped to run for arbitrary periods of time, such as a service performing background music playback." />
      <item value="parse Subscription From Element" />
      <item value="EXTRA ALLOW PROVISIONING" />
      <item value="FLAG ACTIVITY NO ANIMATION" />
      <item value="STYLE SPINNER" />
      <item value="Build off of nightly TensorFlow Lite" />
      <item value="Patches the application context class loader by appending extra dex files loaded from the application apk. This method should be called in the attachBaseContext of your {@link Application}, see {@link MultiDexApplication} for more explanation and an example. @param context application context. @throws RuntimeException if an error occurred preventing the classloader extension." />
      <item value="ACTION POST CONNECTIVITY CHANGE" />
      <item value="origin" />
      <item value="Uncomment" />
      <item value="遥控" />
      <item value="yaok" />
      <item value="spotless" />
      <item value="failed to resolve types" />
      <item value="serif" />
      <item value="typeface" />
      <item value="text Appearance Small Inverse" />
      <item value="Interactive" />
      <item value="interactive" />
      <item value="from" />
      <item value="Prepare" />
      <item value="prepare" />
      <item value="No Class Def Found Error" />
      <item value="Failed resolution of:" />
      <item value="A {@code Future} represents the result of an asynchronous computation. Methods are provided to check if the computation is complete, to wait for its completion, and to retrieve the result of the computation. The result can only be retrieved using method {@code get} when the computation has completed, blocking if necessary until it is ready. Cancellation is performed by the {@code cancel} method. Additional methods are provided to determine if the task completed normally or was cancelled. Once a computation has completed, the computation cannot be cancelled. If you would like to use a {@code Future} for the sake of cancellability but not provide a usable result, you can declare types of the form {@code Future&lt;?&gt;} and return {@code null} as a result of the underlying task." />
      <item value="expected" />
      <item value="aka" />
      <item value="Tributes" />
      <item value="来源" />
      <item value="Judgement" />
      <item value="on Arrow Up Ctrl Pressed" />
      <item value="Ctrl" />
      <item value="StrictMode policy violation; ~duration=11 ms: android.os.strictmode.DiskWriteViolation" />
      <item value="引导" />
      <item value="冲锋" />
      <item value="集结" />
      <item value="surveillance" />
      <item value="矩形" />
      <item value="单位" />
      <item value="m Alert Point" />
      <item value="Alert" />
      <item value="警戒" />
      <item value="place" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="588" />
        <entry key="ENGLISH" value="589" />
        <entry key="POLISH" value="1" />
        <entry key="GERMAN" value="1" />
        <entry key="FRENCH" value="10" />
        <entry key="CATALAN" value="2" />
        <entry key="KANNADA" value="1" />
        <entry key="LATIN" value="2" />
        <entry key="ROMANIAN" value="1" />
        <entry key="JAPANESE" value="4" />
        <entry key="SWEDISH" value="2" />
        <entry key="WELSH" value="2" />
        <entry key="GREEK" value="3" />
        <entry key="HUNGARIAN" value="1" />
        <entry key="ITALIAN" value="2" />
        <entry key="HINDI" value="3" />
        <entry key="INDONESIAN" value="2" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1609384133357" />
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="Arial" />
    <option name="primaryFontFamily" value="SimSun" />
  </component>
</application>