<application>
  <component name="AppStorage">
    <option name="newTranslationDialogCollapseDictViewer" value="false" />
    <option name="newTranslationDialogHeight" value="232" />
    <option name="newTranslationDialogWidth" value="518" />
    <option name="newTranslationDialogX" value="826" />
    <option name="newTranslationDialogY" value="470" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="tiramisu" />
      <item value="tira" />
      <item value="Creates a property delegate for a single process DataStore. This should only be called once in a file (at the top level), and all usages of the DataStore should use a reference the same Instance. The receiver type for the property delegate must be an instance of Context. This should only be used from a single application in a single classloader in a single process. Example usage: val Context.myDataStore by preferencesDataStore(&quot;filename&quot;) class SomeClass(val context: Context) { suspend fun update() = context.myDataStore.edit {...} } 参数: name - The name of the preferences. The preferences will be stored in a file in the &quot;datastore&quot; subdirectory in the application context's files directory and is generated using preferencesDataStoreFile. corruptionHandler - The corruptionHandler is invoked if DataStore encounters a androidx.datastore.core.CorruptionException when attempting to read data. CorruptionExceptions are thrown by serializers when data can not be de-serialized. produceMigrations - produce the migrations. The ApplicationContext is passed in to these callbacks as a parameter. DataMigrations are run before any access to data can occur. Each producer and migration may be run more than once whether or not it already succeeded (potentially because another migration failed or a write to disk failed.) scope - The scope in which IO operations and transform functions will execute. 返回: a property delegate that manages a datastore as a singleton." />
      <item value="toggle Foreground Service" />
      <item value="Used to indicate that the WorkRequest has completed in a failure state. All dependent work will also be marked as FAILED and will never run." />
      <item value="ENQUEUED" />
      <item value="processor" />
      <item value="process" />
      <item value="proce" />
      <item value="pr" />
      <item value="prec" />
      <item value="pre" />
      <item value="Annotates a parameter within an {@link AssistedInject}-annotated constructor." />
      <item value="Assisted" />
      <item value="While Subscribed" />
      <item value="当前朝向" />
      <item value="当前 " />
      <item value="当前" />
      <item value="dang" />
      <item value="dangq" />
      <item value="角差" />
      <item value="角度差" />
      <item value="角度 " />
      <item value="j" />
      <item value="圆&#10;" />
      <item value="圆" />
      <item value="coordinate" />
      <item value="Returns true if the code is in [200..300), which means the request was successfully received, understood, and accepted." />
      <item value="egl Slice" />
      <item value="A discriminated union that encapsulates a successful outcome with a value of type T or a failure with an arbitrary Throwable exception." />
      <item value="init Count Down" />
      <item value="Down" />
      <item value="倒计时" />
      <item value="paid&#10;" />
      <item value="pai" />
      <item value="CoroutineScope tied to this Lifecycle. This scope will be cancelled when the Lifecycle is destroyed. This scope is bound to Dispatchers.Main.immediate" />
      <item value="间隔5秒的流" />
      <item value="间隔5秒的 " />
      <item value="间隔5秒的" />
      <item value="间隔5 " />
      <item value="间隔5" />
      <item value="间隔" />
      <item value="jian" />
      <item value="Launches and runs the given block when the [Lifecycle] controlling this [LifecycleCoroutineScope] is at least in [Lifecycle.State.STARTED] state. The returned [Job] will be cancelled when the [Lifecycle] is destroyed. Caution: This API is not recommended to use as it can lead to wasted resources in some cases. Please, use the [Lifecycle.repeatOnLifecycle] API instead. This API will be removed in a future release. @see Lifecycle.whenStarted @see Lifecycle.coroutineScope" />
      <item value="Cocos [Keeling] Islands" />
      <item value="Cocos" />
      <item value="countries&#10;" />
      <item value="countries" />
      <item value="invoke" />
      <item value="Login" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1110" />
        <entry key="ENGLISH" value="1110" />
        <entry key="POLISH" value="2" />
        <entry key="GERMAN" value="2" />
        <entry key="FRENCH" value="12" />
        <entry key="DUTCH" value="1" />
        <entry key="CATALAN" value="3" />
        <entry key="KANNADA" value="1" />
        <entry key="LATIN" value="2" />
        <entry key="ROMANIAN" value="2" />
        <entry key="JAPANESE" value="4" />
        <entry key="SWEDISH" value="2" />
        <entry key="WELSH" value="2" />
        <entry key="SPANISH" value="1" />
        <entry key="GREEK" value="3" />
        <entry key="HUNGARIAN" value="1" />
        <entry key="ITALIAN" value="2" />
        <entry key="HINDI" value="3" />
        <entry key="INDONESIAN" value="2" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1651546503397" />
  </component>
</application>