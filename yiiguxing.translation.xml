<application>
  <component name="AppStorage">
    <histories>
      <item value="mroutetest Graphics Overlay" />
      <item value="DASH" />
      <item value="TOPOGRAPHIC" />
      <item value="COMPASS" />
      <item value="Auto Pan Mode" />
      <item value="target Location" />
      <item value="get Tap Location" />
      <item value="set Viewpoint Geometry Async" />
      <item value="newdifvertical" />
      <item value="get Traversed Geometry" />
      <item value="get Remaining Geometry" />
      <item value="set geometries for the route ahead and the remaining route" />
      <item value="create a graphic (solid) to represent the route that's been traveled (initially empty)" />
      <item value="create a graphic (with a dashed line symbol) to represent the route" />
      <item value="m Route Traveled Graphic" />
      <item value="m Route Ahead Graphic" />
      <item value="Traveled" />
      <item value="Ahead" />
      <item value="enable Rerouting Async" />
      <item value="generate" />
      <item value="set up a RouteTracker for navigation along the calculated route" />
      <item value="offlinegeocode" />
      <item value="kml" />
      <item value="Shows straightforward ways to create Point, Envelope, Multipoint, Polyline, and Polygon geometries. Shows a MapView * with a GraphicsOverlay containing Graphics created from the Point, Multipoint, Polyline, and Polygon geometries, and * sets the Viewpoint of the Map from the Envelope geometry." />
      <item value="arrived at the final destination" />
      <item value="åˆ†" />
      <item value="solve Route Async" />
      <item value="create Default Parameters Async" />
      <item value="generate a route with directions and stops for navigation" />
      <item value="Stop" />
      <item value="m Child Background Paint" />
      <item value="Child" />
      <item value="is Expand" />
      <item value="Restricted constructor. * * @param lowerLimit the lower field limit, null means no limit * @param upperLimit the upper field limit, null means no limit" />
      <item value="arrow" />
      <item value="Converts this duration to a period in days assuming that there are the * standard number of milliseconds in a day. * &lt;p&gt; * This method assumes that there are 24 hours in a day, * 60 minutes in an hour, 60 seconds in a minute and 1000 milliseconds in * a second. This will be true for most days, however days with Daylight * Savings changes will not have 24 hours, so use this method with care. * * @return a period representing the number of standard days in this period, never null * @throws ArithmeticException if the number of days is too large to be represented * @since 2.0" />
      <item value="inflater" />
      <item value="percentage" />
      <item value="ONHOLD" />
      <item value="tint" />
      <item value="distribution" />
      <item value="et distribution" />
      <item value="memo" />
      <item value="Schema export directory is not provided to the annotation processor so we cannot export the schema. You can either provide `room.schemaLocation` annotation processor argument OR set exportSchema to false." />
      <item value="There are multiple good constructors and Room will pick the no-arg constructor. You can use the @Ignore annotation to eliminate unwanted constructors." />
      <item value="DESC" />
      <item value="Returns a copy of this datetime with different millis. &lt;p&gt; The returned object will be either be a new instance or &lt;code&gt;this&lt;/code&gt;. Only the millis will change, the chronology and time zone are kept. @param newMillis the new millis, from 1970-01-01T00:00:00Z @return a copy of this datetime with different millis" />
      <item value="Returns a comparator that only considers time fields. Date is ignored. &lt;p&gt; The time-zone is considered when using this comparator. The input millis are truncated to be within the day in the time-zone of that input value. Thus, two inputs with different time-zones will typically not be equal @return a comparator over all time fields" />
      <item value="Returns a comparator that only considers date fields. Time of day is ignored. &lt;p&gt; The time-zone is considered when using this comparator. The input millis are rounded down to the start of the day in the time-zone of that input value. Thus, two inputs with different time-zones will typically not be equal @return a comparator over all date fields" />
      <item value="hour" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="380" />
        <entry key="ENGLISH" value="381" />
        <entry key="POLISH" value="1" />
        <entry key="FRENCH" value="2" />
        <entry key="CATALAN" value="2" />
        <entry key="KANNADA" value="1" />
        <entry key="LATIN" value="2" />
        <entry key="ROMANIAN" value="1" />
        <entry key="WELSH" value="2" />
        <entry key="GREEK" value="3" />
        <entry key="ITALIAN" value="2" />
        <entry key="HINDI" value="1" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="Consolas" />
  </component>
</application>