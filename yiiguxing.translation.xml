<application>
  <component name="AppStorage">
    <histories>
      <item value="arrow" />
      <item value="Converts this duration to a period in days assuming that there are the * standard number of milliseconds in a day. * &lt;p&gt; * This method assumes that there are 24 hours in a day, * 60 minutes in an hour, 60 seconds in a minute and 1000 milliseconds in * a second. This will be true for most days, however days with Daylight * Savings changes will not have 24 hours, so use this method with care. * * @return a period representing the number of standard days in this period, never null * @throws ArithmeticException if the number of days is too large to be represented * @since 2.0" />
      <item value="inflater" />
      <item value="percentage" />
      <item value="ONHOLD" />
      <item value="tint" />
      <item value="distribution" />
      <item value="et distribution" />
      <item value="memo" />
      <item value="Schema export directory is not provided to the annotation processor so we cannot export the schema. You can either provide `room.schemaLocation` annotation processor argument OR set exportSchema to false." />
      <item value="There are multiple good constructors and Room will pick the no-arg constructor. You can use the @Ignore annotation to eliminate unwanted constructors." />
      <item value="DESC" />
      <item value="Returns a copy of this datetime with different millis. &lt;p&gt; The returned object will be either be a new instance or &lt;code&gt;this&lt;/code&gt;. Only the millis will change, the chronology and time zone are kept. @param newMillis the new millis, from 1970-01-01T00:00:00Z @return a copy of this datetime with different millis" />
      <item value="Returns a comparator that only considers time fields. Date is ignored. &lt;p&gt; The time-zone is considered when using this comparator. The input millis are truncated to be within the day in the time-zone of that input value. Thus, two inputs with different time-zones will typically not be equal @return a comparator over all time fields" />
      <item value="Returns a comparator that only considers date fields. Time of day is ignored. &lt;p&gt; The time-zone is considered when using this comparator. The input millis are rounded down to the start of the day in the time-zone of that input value. Thus, two inputs with different time-zones will typically not be equal @return a comparator over all date fields" />
      <item value="hour" />
      <item value="BEFORETIME" />
      <item value="DELAYED" />
      <item value="Drawing the month &amp; year" />
      <item value="Determining the date to display" />
      <item value="Determining" />
      <item value="set X Axis" />
      <item value="How many columns are in the data table represented by this Adapter." />
      <item value="How many rows are in the data table represented by this Adapter." />
      <item value="Milestone" />
      <item value="milestones" />
      <item value="Scale View" />
      <item value="Scale" />
      <item value="get Standard Days" />
      <item value="Standard" />
      <item value="Frame Sequence Drawable" />
      <item value="Sequence" />
      <item value="Precent" />
      <item value="Interrupted Exception" />
      <item value="Exception" />
      <item value="This class describes all device configuration information that can impact the resources the application retrieves. This includes both user-specified configuration options (locale list and scaling) as well as device configurations (such as input modes, screen size and screen orientation). &lt;p&gt;You can acquire this object from {@link Resources}, using {@link Resources#getConfiguration}. Thus, from an activity, you can get it by chaining the request with {@link android.app.Activity#getResources}:&lt;/p&gt; &lt;pre&gt;Configuration config = getResources().getConfiguration();&lt;/pre&gt;" />
      <item value="Initiator" />
      <item value="updateAudioDeviceState done" />
      <item value="update" />
      <item value="GATHERING" />
      <item value="Audio focus request granted for VOICE_CALL streams" />
      <item value="See the documentation of requestAudioFocus() for what to use instead with android.media.AudioAttributes to qualify your playback use case" />
      <item value="Use of stream types is deprecated for operations other than volume control" />
      <item value="m With Elevation" />
      <item value="Elevation" />
      <item value="presence" />
      <item value="用户类型变化" />
      <item value="(prohibited by Gerrit: create access denied for refs/heads/master)" />
      <item value="Itinerary" />
      <item value="m Itinerary Layer" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="347" />
        <entry key="ENGLISH" value="350" />
        <entry key="POLISH" value="1" />
        <entry key="FRENCH" value="2" />
        <entry key="CATALAN" value="2" />
        <entry key="KANNADA" value="1" />
        <entry key="LATIN" value="2" />
        <entry key="WELSH" value="2" />
        <entry key="GREEK" value="3" />
        <entry key="ITALIAN" value="2" />
        <entry key="HINDI" value="1" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="Consolas" />
  </component>
</application>